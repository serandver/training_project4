package com.training.library.dao.jdbc;

import com.training.library.dao.connection.ConnectionManager;
import com.training.library.exceptions.ServerException;
import org.apache.log4j.Logger;

import java.sql.*;

import static com.training.library.controller.utils.LogMessage.*;

public class QueryJDBC implements AutoCloseable{

    private static final Logger LOGGER = Logger.getLogger(QueryJDBC.class);

    private Connection connection = null;
	private PreparedStatement preparedStatement = null;
    private Statement statement = null;

    private static ConnectionManager connectionManager = ConnectionManager.getConnectionManagerInstance();

    public QueryJDBC() {
        this.connection = connectionManager.getConnection();
    }
    
    public QueryJDBC(Connection connection) {
        this.connection = connection;
    }

    public void createStatement() throws SQLException {
        this.statement = connection.createStatement();
    }

    public void createPreparedStatement(String query) throws SQLException {
        this.preparedStatement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
    }

    public void createPreparedStatement(String query, int autoGeneratedKeys) throws SQLException {
        this.preparedStatement = connection.prepareStatement(query, autoGeneratedKeys);
    }

	public void setString(int key, String value) throws SQLException {
        preparedStatement.setString(key, value);
	}
	
	public void setInt(int key, int value) throws SQLException {
        preparedStatement.setInt(key, value);
	}
	
	public void setBoolean(int key, boolean value) throws SQLException {
        preparedStatement.setBoolean(key, value);
	}
	
	public void setTimestamp(int key, Timestamp timestamp) throws SQLException {
        preparedStatement.setTimestamp(key, timestamp);
	}
	
	public ResultSet executeQuery(String query) throws SQLException {
		return statement.executeQuery(query);
	}	
	
	public ResultSet executeQuery() throws SQLException {
		return preparedStatement.executeQuery();
	}
	
	public int executeUpdate() throws SQLException {
		return preparedStatement.executeUpdate();
	}

    public ResultSet getGeneratedKeys() throws SQLException {
        return preparedStatement.getGeneratedKeys();
    }

    public void beginTransaction() throws SQLException {
        connection.setAutoCommit(false);
    }

    public void commitTransaction() throws SQLException {
        connection.commit();
    }

    public void rollbackTransaction() throws SQLException{
        connection.rollback();
    }

    @Override
	public void close() {
		try {
			if (this.preparedStatement != null) {
				this.preparedStatement.close();
			}
            if (this.statement != null) {
                this.statement.close();
            }
		} catch (SQLException e) {
            LOGGER.error(CLOSE_STATEMENT_FAILED, e);
            throw new ServerException(e);
        }
		finally {
			connectionManager.releaseConnection(connection);
		}
	}


}
